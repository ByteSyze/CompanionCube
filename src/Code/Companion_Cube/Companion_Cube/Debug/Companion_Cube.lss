
Companion_Cube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000204  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000204  00000298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800064  00800064  0000029c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002c8  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000118  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000160  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000cc  00000000  00000000  0000085c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001c6  00000000  00000000  00000928  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000221  00000000  00000000  00000aee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00000d0f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	40 c0       	rjmp	.+128    	; 0x88 <__vector_3>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	e4 e0       	ldi	r30, 0x04	; 4
  24:	f2 e0       	ldi	r31, 0x02	; 2
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a4 36       	cpi	r26, 0x64	; 100
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a4 e6       	ldi	r26, 0x64	; 100
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a6 36       	cpi	r26, 0x66	; 102
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	14 d0       	rcall	.+40     	; 0x6c <main>
  44:	dd c0       	rjmp	.+442    	; 0x200 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <display_number>:
	DDRB |= (dir & 0x01) << pin;
}

void display_number(unsigned char num)
{
	if(num == 1)
  48:	81 30       	cpi	r24, 0x01	; 1
  4a:	19 f4       	brne	.+6      	; 0x52 <display_number+0xa>
		PORTB = 1 << LED_FRONT;
  4c:	82 e0       	ldi	r24, 0x02	; 2
  4e:	88 bb       	out	0x18, r24	; 24
  50:	08 95       	ret
	else if(num == 2)
  52:	82 30       	cpi	r24, 0x02	; 2
  54:	19 f4       	brne	.+6      	; 0x5c <display_number+0x14>
		PORTB = (0x1 << LED_RIGHT) | (0x1 << LED_LEFT);
  56:	84 e1       	ldi	r24, 0x14	; 20
  58:	88 bb       	out	0x18, r24	; 24
  5a:	08 95       	ret
	else if(num == 3)
  5c:	83 30       	cpi	r24, 0x03	; 3
  5e:	19 f4       	brne	.+6      	; 0x66 <display_number+0x1e>
		PORTB = (0x1 << LED_RIGHT) | (0x1 << LED_LEFT) | (0x1 << LED_BACK);
  60:	8c e1       	ldi	r24, 0x1C	; 28
  62:	88 bb       	out	0x18, r24	; 24
  64:	08 95       	ret
	else
		PORTB = 0x1E; //All 4 LEDs.
  66:	8e e1       	ldi	r24, 0x1E	; 30
  68:	88 bb       	out	0x18, r24	; 24
  6a:	08 95       	ret

0000006c <main>:
/**
* Sets the I/O direction of the specified pin. 1 for output, 0 for input.
*/
void set_pin_dir(char pin, char dir)
{
	DDRB |= (dir & 0x01) << pin;
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	87 bb       	out	0x17, r24	; 23
  70:	b9 9a       	sbi	0x17, 1	; 23
  72:	ba 9a       	sbi	0x17, 2	; 23
  74:	bb 9a       	sbi	0x17, 3	; 23
  76:	bc 9a       	sbi	0x17, 4	; 23
	set_pin_dir(1, PIN_OUT);					// PB1-4 are LEDs.
	set_pin_dir(2, PIN_OUT);
	set_pin_dir(3, PIN_OUT);
	set_pin_dir(4, PIN_OUT);
	
	TCCR0B	|= (0x01 << CS02); //| (0x01 << CS00);	// Set prescaler to 1024; start clock.
  78:	83 b7       	in	r24, 0x33	; 51
  7a:	84 60       	ori	r24, 0x04	; 4
  7c:	83 bf       	out	0x33, r24	; 51
	TIMSK0	|= (0x01 << TOIE0);					//Set timer interrupt register to go off when timer overflows.
  7e:	89 b7       	in	r24, 0x39	; 57
  80:	82 60       	ori	r24, 0x02	; 2
  82:	89 bf       	out	0x39, r24	; 57
	sei();										//Enable interrupts
  84:	78 94       	sei
  86:	ff cf       	rjmp	.-2      	; 0x86 <main+0x1a>

00000088 <__vector_3>:
	while(1);
}

/**Timer overflow interrupt. Called whenever the timer hits its maximum and resets.*/
ISR(TIM0_OVF_vect)
{
  88:	1f 92       	push	r1
  8a:	0f 92       	push	r0
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	0f 92       	push	r0
  90:	11 24       	eor	r1, r1
  92:	2f 93       	push	r18
  94:	3f 93       	push	r19
  96:	4f 93       	push	r20
  98:	5f 93       	push	r21
  9a:	6f 93       	push	r22
  9c:	7f 93       	push	r23
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
  a2:	af 93       	push	r26
  a4:	bf 93       	push	r27
  a6:	ef 93       	push	r30
  a8:	ff 93       	push	r31
	last_button_val = button_val;
  aa:	90 91 62 00 	lds	r25, 0x0062
  ae:	90 93 61 00 	sts	0x0061, r25
	button_val = (PINB >> PB0) & 0x01;
  b2:	86 b3       	in	r24, 0x16	; 22
  b4:	81 70       	andi	r24, 0x01	; 1
  b6:	80 93 62 00 	sts	0x0062, r24
	
	if(button_val == 0)
  ba:	81 11       	cpse	r24, r1
  bc:	0b c0       	rjmp	.+22     	; 0xd4 <__stack+0x35>
	{
		if(last_button_val == button_val)
  be:	91 11       	cpse	r25, r1
  c0:	06 c0       	rjmp	.+12     	; 0xce <__stack+0x2f>
			button_hold_time++;
  c2:	80 91 64 00 	lds	r24, 0x0064
  c6:	8f 5f       	subi	r24, 0xFF	; 255
  c8:	80 93 64 00 	sts	0x0064, r24
  cc:	03 c0       	rjmp	.+6      	; 0xd4 <__stack+0x35>
		else
			button_hold_time=0;
  ce:	10 92 64 00 	sts	0x0064, r1
  d2:	16 c0       	rjmp	.+44     	; 0x100 <__stack+0x61>
	}
	if(button_hold_time == 5)
  d4:	80 91 64 00 	lds	r24, 0x0064
  d8:	85 30       	cpi	r24, 0x05	; 5
  da:	91 f4       	brne	.+36     	; 0x100 <__stack+0x61>
	{
		if(state == STATE_SLEEP)
  dc:	80 91 60 00 	lds	r24, 0x0060
  e0:	83 30       	cpi	r24, 0x03	; 3
  e2:	39 f4       	brne	.+14     	; 0xf2 <__stack+0x53>
		{
			TCCR0B	&= ~(1 << CS00); 
  e4:	83 b7       	in	r24, 0x33	; 51
  e6:	8e 7f       	andi	r24, 0xFE	; 254
  e8:	83 bf       	out	0x33, r24	; 51
			state = STATE_STARTUP;
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	80 93 60 00 	sts	0x0060, r24
  f0:	0b c0       	rjmp	.+22     	; 0x108 <__stack+0x69>
		}
		else if(state == STATE_FLASH)
  f2:	82 30       	cpi	r24, 0x02	; 2
  f4:	09 f0       	breq	.+2      	; 0xf8 <__stack+0x59>
  f6:	64 c0       	rjmp	.+200    	; 0x1c0 <__stack+0x121>
			state = STATE_SLEEP;
  f8:	83 e0       	ldi	r24, 0x03	; 3
  fa:	80 93 60 00 	sts	0x0060, r24
  fe:	5e c0       	rjmp	.+188    	; 0x1bc <__stack+0x11d>
	}
	
	if(state == STATE_STARTUP)
 100:	80 91 60 00 	lds	r24, 0x0060
 104:	81 30       	cpi	r24, 0x01	; 1
 106:	a1 f5       	brne	.+104    	; 0x170 <__stack+0xd1>
	{
		if(counter % 2)
 108:	80 91 65 00 	lds	r24, 0x0065
 10c:	80 ff       	sbrs	r24, 0
 10e:	2a c0       	rjmp	.+84     	; 0x164 <__stack+0xc5>
		{
			if(number % 4 == 0)
 110:	20 91 63 00 	lds	r18, 0x0063
 114:	82 2f       	mov	r24, r18
 116:	83 70       	andi	r24, 0x03	; 3
 118:	19 f4       	brne	.+6      	; 0x120 <__stack+0x81>
				PORTB = 0x01 << LED_RIGHT;
 11a:	80 e1       	ldi	r24, 0x10	; 16
 11c:	88 bb       	out	0x18, r24	; 24
 11e:	0f c0       	rjmp	.+30     	; 0x13e <__stack+0x9f>
			else if(number % 3 == 0)
 120:	82 2f       	mov	r24, r18
 122:	63 e0       	ldi	r22, 0x03	; 3
 124:	61 d0       	rcall	.+194    	; 0x1e8 <__udivmodqi4>
 126:	91 11       	cpse	r25, r1
 128:	03 c0       	rjmp	.+6      	; 0x130 <__stack+0x91>
				PORTB = 0x01 << LED_BACK;
 12a:	88 e0       	ldi	r24, 0x08	; 8
 12c:	88 bb       	out	0x18, r24	; 24
 12e:	07 c0       	rjmp	.+14     	; 0x13e <__stack+0x9f>
			else if(number % 2 == 0)
 130:	20 fd       	sbrc	r18, 0
 132:	03 c0       	rjmp	.+6      	; 0x13a <__stack+0x9b>
				PORTB = 0x01 << LED_LEFT;
 134:	84 e0       	ldi	r24, 0x04	; 4
 136:	88 bb       	out	0x18, r24	; 24
 138:	02 c0       	rjmp	.+4      	; 0x13e <__stack+0x9f>
			else if(number % 1 == 0)
				PORTB = 0x01 << LED_FRONT;
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	88 bb       	out	0x18, r24	; 24
			
			if(++number > 16)
 13e:	80 91 63 00 	lds	r24, 0x0063
 142:	8f 5f       	subi	r24, 0xFF	; 255
 144:	80 93 63 00 	sts	0x0063, r24
 148:	81 31       	cpi	r24, 0x11	; 17
 14a:	60 f0       	brcs	.+24     	; 0x164 <__stack+0xc5>
			{
				TCCR0B	|= (0x01 << CS02) | (0x01 << CS00);
 14c:	83 b7       	in	r24, 0x33	; 51
 14e:	85 60       	ori	r24, 0x05	; 5
 150:	83 bf       	out	0x33, r24	; 51
				state = STATE_FLASH;
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	80 93 60 00 	sts	0x0060, r24
				number = 3;
 158:	83 e0       	ldi	r24, 0x03	; 3
 15a:	80 93 63 00 	sts	0x0063, r24
				counter = 0;
 15e:	10 92 65 00 	sts	0x0065, r1
				return;
 162:	31 c0       	rjmp	.+98     	; 0x1c6 <__stack+0x127>
			}
		}
		counter++;
 164:	80 91 65 00 	lds	r24, 0x0065
 168:	8f 5f       	subi	r24, 0xFF	; 255
 16a:	80 93 65 00 	sts	0x0065, r24
 16e:	2b c0       	rjmp	.+86     	; 0x1c6 <__stack+0x127>
	}	
	else if(state == STATE_FLASH)
 170:	82 30       	cpi	r24, 0x02	; 2
 172:	21 f5       	brne	.+72     	; 0x1bc <__stack+0x11d>
	{
		if(counter % 2 == 0)
 174:	90 91 65 00 	lds	r25, 0x0065
 178:	90 fd       	sbrc	r25, 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <__stack+0xe1>
		{
			PORTB = 0x00; //Turn off LEDs.
 17c:	18 ba       	out	0x18, r1	; 24
 17e:	18 c0       	rjmp	.+48     	; 0x1b0 <__stack+0x111>
		}
		else
		{
			if(number == 3 && counter < 8)
 180:	80 91 63 00 	lds	r24, 0x0063
 184:	83 30       	cpi	r24, 0x03	; 3
 186:	31 f4       	brne	.+12     	; 0x194 <__stack+0xf5>
 188:	98 30       	cpi	r25, 0x08	; 8
 18a:	20 f4       	brcc	.+8      	; 0x194 <__stack+0xf5>
			{
				counter++;
 18c:	9f 5f       	subi	r25, 0xFF	; 255
 18e:	90 93 65 00 	sts	0x0065, r25
				return; //Add some delay after 2.
 192:	19 c0       	rjmp	.+50     	; 0x1c6 <__stack+0x127>
			}
		
			display_number(number);
 194:	59 df       	rcall	.-334    	; 0x48 <display_number>
		
			if(++number > 4)
 196:	80 91 63 00 	lds	r24, 0x0063
 19a:	8f 5f       	subi	r24, 0xFF	; 255
 19c:	80 93 63 00 	sts	0x0063, r24
 1a0:	85 30       	cpi	r24, 0x05	; 5
 1a2:	30 f0       	brcs	.+12     	; 0x1b0 <__stack+0x111>
			{
				counter = 0;
 1a4:	10 92 65 00 	sts	0x0065, r1
				number	= 1;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	80 93 63 00 	sts	0x0063, r24
				return;
 1ae:	0b c0       	rjmp	.+22     	; 0x1c6 <__stack+0x127>
			}
		}
		counter++;
 1b0:	80 91 65 00 	lds	r24, 0x0065
 1b4:	8f 5f       	subi	r24, 0xFF	; 255
 1b6:	80 93 65 00 	sts	0x0065, r24
 1ba:	05 c0       	rjmp	.+10     	; 0x1c6 <__stack+0x127>
	}
	else //Assume sleep
	{
		PORTB = 0x00;
 1bc:	18 ba       	out	0x18, r1	; 24
 1be:	03 c0       	rjmp	.+6      	; 0x1c6 <__stack+0x127>
		}
		else if(state == STATE_FLASH)
			state = STATE_SLEEP;
	}
	
	if(state == STATE_STARTUP)
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <__stack+0x11d>
 1c4:	a1 cf       	rjmp	.-190    	; 0x108 <__stack+0x69>
	}
	else //Assume sleep
	{
		PORTB = 0x00;
	}
}
 1c6:	ff 91       	pop	r31
 1c8:	ef 91       	pop	r30
 1ca:	bf 91       	pop	r27
 1cc:	af 91       	pop	r26
 1ce:	9f 91       	pop	r25
 1d0:	8f 91       	pop	r24
 1d2:	7f 91       	pop	r23
 1d4:	6f 91       	pop	r22
 1d6:	5f 91       	pop	r21
 1d8:	4f 91       	pop	r20
 1da:	3f 91       	pop	r19
 1dc:	2f 91       	pop	r18
 1de:	0f 90       	pop	r0
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	0f 90       	pop	r0
 1e4:	1f 90       	pop	r1
 1e6:	18 95       	reti

000001e8 <__udivmodqi4>:
 1e8:	99 1b       	sub	r25, r25
 1ea:	79 e0       	ldi	r23, 0x09	; 9
 1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <__udivmodqi4_ep>

000001ee <__udivmodqi4_loop>:
 1ee:	99 1f       	adc	r25, r25
 1f0:	96 17       	cp	r25, r22
 1f2:	08 f0       	brcs	.+2      	; 0x1f6 <__udivmodqi4_ep>
 1f4:	96 1b       	sub	r25, r22

000001f6 <__udivmodqi4_ep>:
 1f6:	88 1f       	adc	r24, r24
 1f8:	7a 95       	dec	r23
 1fa:	c9 f7       	brne	.-14     	; 0x1ee <__udivmodqi4_loop>
 1fc:	80 95       	com	r24
 1fe:	08 95       	ret

00000200 <_exit>:
 200:	f8 94       	cli

00000202 <__stop_program>:
 202:	ff cf       	rjmp	.-2      	; 0x202 <__stop_program>
